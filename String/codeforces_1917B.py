# You are given a string s of length n. Let's define two operations you can apply on the string:
# remove the first character of the string;
# remove the second character of the string.
# Your task is to find the number of distinct non-empty strings that can be generated by applying the given 
# operations on the initial string any number of times (possibly zero), in any order.

# Input
# Each test consists of multiple test cases. The first line contains a single integer t
# (1≤t≤104) — the number of test cases. The description of the test cases follows.
# The first line of each test case contains n (1≤n≤105) — the length of the string.
# The second line of each test case contains the string s.
# It is guaranteed that the string only contains lowercase letters of the English alphabet.
# It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.
# Output
# For each test case, output a single integer: the number of distinct non-empty strings you can get.

import sys


def count_distinct_substrings(word):
    seen_chars = set()
    count = 0
    for char in word:
        seen_chars.add(char)
        count += len(seen_chars)
    return count


if __name__ == "__main__":
    t = int(sys.stdin.readline())
    for _ in range(t):
        length = int(sys.stdin.readline())
        word = sys.stdin.readline().strip()
        result = count_distinct_substrings(word)
        print(result)
